1. Write code to swap the values 25 and 40.
my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

    ANSWER:
    value = my_list[6]
    my_list[6] = my_list[7]
    my_list[7] = value

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

    ANSWER:
    value = my_list[3]
    my_list[3] = my_list[0]
    my_list[0] = value

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

    ANSWER:
    When you run this code, instead of swapping the values, it will set my_list[1] and my_list[0]
    to the same value: my_list[0]'s value. To fix this problem, all you have to do is set temp to my_list[0]
    It should look like this

        my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
        temp = my_list[1]
        my_list[1] = my_list[0]
        my_list[0] = temp

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60

    Answer:
    Iteration 0: 97   74    8   98   47   62   12   11    0   60
    Iteration 1: 0    74    8   98   47   62   12   11    97  60
    Iteration 2: 0    8     74  98   47   62   12   11    97  60
    Iteration 3: 0    8     11  98   47   62   12   74    97  60
    Iteration 4: 0    8     11  12   47   62   98   74    97  60
    Iteration 5: 0    8     11  12   47   62   98   74    97  60
    Iteration 7: 0    8     11  12   47   60   98   74    97  62
    Iteration 8: 0    8     11  12   47   60   62   74    97  98
    Iteration 9: 0    8     11  12   47   60   62   74    97  98
    Iteration 10:0    8     11  12   47   60   62   74    97  98


5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25

    Answer:
    Iteration 0: 74   92   18   47   40   58    0   36   29   25
    Iteration 1: 0    92   18   47   40   58    74  36   29   25
    Iteration 2: 0    18   92   47   40   58    74  36   29   25
    Iteration 3: 0    18   25   47   40   58    74  36   29   92
    Iteration 4: 0    18   25   29   40   58    74  36   47   92
    Iteration 5: 0    18   25   29   36   58    74  40   47   92
    Iteration 6: 0    18   25   29   36   40    74  58   47   92
    Iteration 7: 0    18   25   29   36   40    47  58   74   92
    Iteration 8: 0    18   25   29   36   40    47  58   74   92
    Iteration 9: 0    18   25   29   36   40    47  58   74   92
    Iteration 10:0    18   25   29   36   40    47  58   74   92

6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25

    Answer:
    Iteration 0: 74   92   18   47   40   58    0   36   29   25
    Iteration 1: 74   92   18   47   40   58    0   36   29   25
    Iteration 2: 18   74   92   47   40   58    0   36   29   25
    Iteration 3: 18   47   74   92   40   58    0   36   29   25
    Iteration 4: 18   40   47   74   92   58    0   36   29   25
    Iteration 5: 18   40   47   58   74   92    0   36   29   25
    Iteration 6: 0    18   40   47   58   74    92  36   29   25
    Iteration 7: 0    18   36   40   47   58    74  92   29   25
    Iteration 8: 0    18   29   36   40   47    58  74   92   25
    Iteration 9: 0    18   25   29   36   40    47  58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

37   11   14   50   24    7   17   88   99    9

    Answer:
    Iteration 0: 37   11   14   50   24    7   17   88   99    9
    Iteration 1: 11   37   14   50   24    7   17   88   99    9
    Iteration 2: 11   14   37   50   24    7   17   88   99    9
    Iteration 3: 11   14   37   50   24    7   17   88   99    9
    Iteration 4: 11   14   24   37   50    7   17   88   99    9
    Iteration 5: 7    11   14   24   37    50  17   88   99    9
    Iteration 6: 7    11   14   17   24    37  50   88   99    9
    Iteration 7: 7    11   14   17   24    37  50   88   99    9
    Iteration 8: 7    11   14   17   24    37  50   88   99    9
    Iteration 9: 7    9    11   14   17   24    37  50   88    99

8. Explain what `min_pos` does in the selection sort.

    Answer:
    min_pos in a selection sort is the position of the value that needs to be placed in cur_pos.
    A program will find min_pos through a linear search of the rest of the list, finding the smallest
    value.

9. Explain what `cur_pos` does in the selection sort.

    Answer:
    cur_pos in a selection sort is the position you are trying to fill with the correct value.
    By keeping track of the current place that needs to get filled, you ensure the value you find
    will be placed in the correct position.

10. Explain what `scan_pos` does in the selection sort.

    Answer:
    scan_pos in a selection sort is the position of a list you test with min_pos to see if the value
    at scan_pos is smaller than the value at min_pos.
    If it is smaller than min_pos, min_pos becomes that instance of scan_pos.

11. Explain what `key_pos` and `key_value` are in the insertion sort.

    Answer:

    key_pos is a value that keeps track of where the list is/is not sorted.
    As the list becomes sorted, key_pos will increase, as the amount of the list that is sorted
    also increases.

    key_value is the value stored at position key_pos. This is the value that is tested with
    the value at scan_pos.

12. Explain `scan_pos` in the insertion sort.

    Answer:
    scan_pos is the position holding the value that is tested with key_value. Unlike a selection
    sort, scan_pos will move from the key_pos to the beginning of the list, from right to left.

13. Look at the example sort program here:

https://learn.arcade.academy/chapters/27_sorting/sorting.html#full-sorting-example


Modify the sorts to print the number of times the inside loop is run,
and the number of times the outside loop is run.
Modify the program to work with a list of 100.
Paste the code you used here.

CODE:

import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    run_time_inside = 0
    run_time_outside = 0

    # Loop through the entire array
    for cur_pos in range(len(my_list)):
        # Find the position that has the smallest number
        # Start with the current position

        run_time_outside += 1

        min_pos = cur_pos

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):

            run_time_inside += 1

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp

    print("Times Outside Loop Ran: ",run_time_outside)
    print("Times Inside Loop Ran: ",run_time_inside)


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """

    run_time_inside = 0
    run_time_outside = 0

    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)):

        run_time_outside += 1

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):

            run_time_inside += 1

            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    print("Times Outside Loop Ran: ", run_time_outside)
    print("Times Inside Loop Ran: ", run_time_inside)


# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)

    # Use the insertion sort and print the result
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()

END CODE

Run the program and list the numbers you got here.
(DON'T FORGET TO INCLUDE THE RESULTS!)

Selection Sort
Times Outside Loop Ran:  100
Times Inside Loop Ran:  4950
  0  1  1  1  2  4  7  7  9 10 13 13 13 14 15 15 17 17 21 22 22 27 27 28 28 28 29 29 32 32 34 35 38 38 39 42 43 44 44 45 47 48 49 49 50 50 50 50 50 51 52 53 54 57 58 58 59 60 61 61 62 63 64 64 65 65 65 65 66 67 67 70 72 72 73 75 77 77 78 78 79 80 80 81 82 83 83 83 87 87 89 89 89 92 95 95 96 97 98 99

Insertion Sort
Times Outside Loop Ran:  99
Times Inside Loop Ran:  2401
  0  1  1  1  2  4  7  7  9 10 13 13 13 14 15 15 17 17 21 22 22 27 27 28 28 28 29 29 32 32 34 35 38 38 39 42 43 44 44 45 47 48 49 49 50 50 50 50 50 51 52 53 54 57 58 58 59 60 61 61 62 63 64 64 65 65 65 65 66 67 67 70 72 72 73 75 77 77 78 78 79 80 80 81 82 83 83 83 87 87 89 89 89 92 95 95 96 97 98 99

Inside loop for selection sort should be about 5,000, and insertion sort 2,500.
Double-check if you don't get numbers close to these.